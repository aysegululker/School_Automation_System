using DAL.Entity.Enum;
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Net;
using System.Security.Principal;
using System.Text;

namespace DAL.Entity.Base
{
    public class CoreEntity : Person, IEntity<Guid>
    {
        //NOTES
        //[Key] => The key attribute is used to specify the property that uniquely identifies an entity (EntityKey) and mapped to the Primary Key field in a database. (Key özniteliği, bir varlığı (EntityKey) benzersiz olarak tanımlayan ve bir veritabanındaki Birincil Anahtar alanına eşlenen özelliği belirtmek için kullanılır.)
        //[DatabaseGenerated(DatabaseGeneratedOption.Identity)] => The Identity option specifies that the value will only be generated by the database when a value is first added to the database. (Kimlik seçeneği, değerin yalnızca veritabanına ilk değer eklendiğinde veritabanı tarafından oluşturulacağını belirtir.)

        public CoreEntity()
        {
            this.Status = Status.Active;
            this.CreatedDate = DateTime.Now;
            this.CreatedAdUserName = WindowsIdentity.GetCurrent().Name;
            this.CreatedComputerName = Environment.MachineName;
            this.CreatedIP = GetHostName();
            this.CreatedBy = Environment.UserName;

            //Todo: Modified için düzeleme yapılacak.
        }


        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public Guid ID { get; set; }

        public Status Status { get; set; }


        public DateTime? CreatedDate { get; set; }
        public string CreatedComputerName { get; set; }
        public string CreatedIP { get; set; }
        public string CreatedAdUserName { get; set; }
        public string CreatedBy { get; set; }


        public DateTime? ModifiedDate { get; set; }
        public string ModifiedComputerName { get; set; }
        public string ModifiedIP { get; set; }
        public string ModifiedAdUserName { get; set; }
        public string ModifiedBy { get; set; }


        //To Reach IP
        public static string GetHostName()
        {
            string ip = null;
            IPAddress[] localIps = Dns.GetHostAddresses(Dns.GetHostName());
            foreach (var item in localIps)
            {
                if (item.AddressFamily == System.Net.Sockets.AddressFamily.InterNetwork)
                {
                    ip = item.ToString();
                }
            }
            return ip;
        }
    }
}
